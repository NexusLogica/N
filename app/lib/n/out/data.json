{
    "project": {},
    "files": {
        "graphics/constants.js": {
            "name": "graphics/constants.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "graphics/pi-canvas.js": {
            "name": "graphics/pi-canvas.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "graphics/pi-network.js": {
            "name": "graphics/pi-network.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "graphics/pi-neuron.js": {
            "name": "graphics/pi-neuron.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "graphics/pi-standard-templates.js": {
            "name": "graphics/pi-standard-templates.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "graphics/scene.js": {
            "name": "graphics/scene.js",
            "modules": {},
            "classes": {
                "UI.Scene.Network": 1
            },
            "fors": {},
            "namespaces": {
                "UI.Scene": 1
            }
        },
        "graphics/signal-trace.js": {
            "name": "graphics/signal-trace.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "test/network-test.js": {
            "name": "test/network-test.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "test/pi-neuron-test.js": {
            "name": "test/pi-neuron-test.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "test/signal-trace-test.js": {
            "name": "test/signal-trace-test.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "ui/pi-network-panel.js": {
            "name": "ui/pi-network-panel.js",
            "modules": {
                "N": 1
            },
            "classes": {
                "PiNetworkPanelController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "ui/pi-neuron-info-panel.js": {
            "name": "ui/pi-neuron-info-panel.js",
            "modules": {},
            "classes": {
                "PiNeuronInfoPanelController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "ui/pi-neuron-panel.js": {
            "name": "ui/pi-neuron-panel.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "ui/pi-signal-trace-scene.js": {
            "name": "ui/pi-signal-trace-scene.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "compartments.js": {
            "name": "compartments.js",
            "modules": {},
            "classes": {
                "Comp.OutputFromSignal": 1,
                "Comp.SignalInput": 1,
                "Comp.AcetylcholineInput": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "connection.js": {
            "name": "connection.js",
            "modules": {},
            "classes": {
                "Connection": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "n.js": {
            "name": "n.js",
            "modules": {},
            "classes": {
                "N": 1,
                "Objects": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "network.js": {
            "name": "network.js",
            "modules": {},
            "classes": {
                "Network": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "neuron.js": {
            "name": "neuron.js",
            "modules": {},
            "classes": {
                "Neuron": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "signal.js": {
            "name": "signal.js",
            "modules": {},
            "classes": {
                "AnalogSignal": 1,
                "DiscreteSignal": 1,
                "TableSearch": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "stock-neurons.js": {
            "name": "stock-neurons.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "N": {
            "name": "N",
            "submodules": {},
            "classes": {
                "UI.Scene.Network": 1,
                "PiNetworkPanelController": 1,
                "PiNeuronInfoPanelController": 1,
                "Comp.OutputFromSignal": 1,
                "Comp.SignalInput": 1,
                "Comp.AcetylcholineInput": 1,
                "Connection": 1,
                "N": 1,
                "Objects": 1,
                "Network": 1,
                "Neuron": 1,
                "AnalogSignal": 1,
                "DiscreteSignal": 1,
                "TableSearch": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "signal.js",
            "line": 407,
            "description": "This is the N simulator."
        }
    },
    "classes": {
        "UI.Scene.Network": {
            "name": "UI.Scene.Network",
            "shortname": "UI.Scene.Network",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "N",
            "namespace": "UI.Scene",
            "file": "graphics/scene.js",
            "line": 29,
            "description": "This is the scene handler for network scenes.",
            "is_constructor": 1
        },
        "PiNetworkPanelController": {
            "name": "PiNetworkPanelController",
            "shortname": "PiNetworkPanelController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "N",
            "namespace": "",
            "file": "ui/pi-network-panel.js",
            "line": 24,
            "description": "The network scene controller. Create via<br/>&nbsp;&nbsp;&nbsp;&lt;div ng-controller=\"PiNetworkPanelController\"&gt;...<br/>"
        },
        "PiNeuronInfoPanelController": {
            "name": "PiNeuronInfoPanelController",
            "shortname": "PiNeuronInfoPanelController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "N",
            "namespace": "",
            "file": "ui/pi-neuron-info-panel.js",
            "line": 24,
            "description": "The neuron information panel controller. Create via<br/>&nbsp;&nbsp;&nbsp;&lt;div ng-controller=\"PiNeuronInfoPanelController\"&gt;...<br/>"
        },
        "Comp.OutputFromSignal": {
            "name": "Comp.OutputFromSignal",
            "shortname": "Comp.OutputFromSignal",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "N",
            "namespace": "",
            "file": "compartments.js",
            "line": 32,
            "description": "An output compartment that has a signal object as the value for the output. This is typically used as an external input\nto a system, but it can also be used as a neuron that bursts based on an internal clock.\n\nThe signal can be analog, discrete, or a custom signal object.",
            "params": [
                {
                    "name": "neuron",
                    "description": ""
                },
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "shortName",
                    "description": ""
                }
            ],
            "is_constructor": 1
        },
        "Comp.SignalInput": {
            "name": "Comp.SignalInput",
            "shortname": "Comp.SignalInput",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "N",
            "namespace": "",
            "file": "compartments.js",
            "line": 189,
            "description": "A compartment that has, as its output, a signal object.",
            "params": [
                {
                    "name": "neuron",
                    "description": ""
                },
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "shortName",
                    "description": ""
                }
            ],
            "is_constructor": 1
        },
        "Comp.AcetylcholineInput": {
            "name": "Comp.AcetylcholineInput",
            "shortname": "Comp.AcetylcholineInput",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "N",
            "namespace": "",
            "file": "compartments.js",
            "line": 245,
            "description": "A modulator input that receives input from acetylcholine source.",
            "params": [
                {
                    "name": "neuron",
                    "description": "",
                    "type": "N.Neuron"
                },
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "shortName",
                    "description": "",
                    "type": "Stirng"
                }
            ],
            "is_constructor": 1
        },
        "Connection": {
            "name": "Connection",
            "shortname": "Connection",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "N",
            "namespace": "",
            "file": "connection.js",
            "line": 21,
            "description": "A connection object. This object is essentially a shell around N.Compartment objects.",
            "params": [
                {
                    "name": "network",
                    "description": ""
                }
            ],
            "is_constructor": 1
        },
        "N": {
            "name": "N",
            "shortname": "N",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "N",
            "namespace": "",
            "file": "n.js",
            "line": 21,
            "description": "Globally accessible functions."
        },
        "Objects": {
            "name": "Objects",
            "shortname": "Objects",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "N",
            "namespace": "",
            "file": "n.js",
            "line": 280,
            "description": "Dictionary for holding globally accessible objects."
        },
        "Network": {
            "name": "Network",
            "shortname": "Network",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "N",
            "namespace": "",
            "file": "network.js",
            "line": 21,
            "description": "A network object which can contain neurons or child networks.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "parentNetwork",
                    "description": "The parent network, if one exists.",
                    "type": "Object"
                }
            ]
        },
        "Neuron": {
            "name": "Neuron",
            "shortname": "Neuron",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "N",
            "namespace": "",
            "file": "neuron.js",
            "line": 24,
            "description": "A neuron object. This object is essentially a shell around N.Compartment objects.",
            "params": [
                {
                    "name": "network",
                    "description": ""
                }
            ],
            "is_constructor": 1
        },
        "AnalogSignal": {
            "name": "AnalogSignal",
            "shortname": "AnalogSignal",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "N",
            "namespace": "",
            "file": "signal.js",
            "line": 28,
            "description": "The analog signal class.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "shortName",
                    "description": "",
                    "type": "String"
                }
            ]
        },
        "DiscreteSignal": {
            "name": "DiscreteSignal",
            "shortname": "DiscreteSignal",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "N",
            "namespace": "",
            "file": "signal.js",
            "line": 199,
            "description": "A discrete signal class.",
            "params": [
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "shortName",
                    "description": ""
                }
            ],
            "is_constructor": 1
        },
        "TableSearch": {
            "name": "TableSearch",
            "shortname": "TableSearch",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "N",
            "namespace": "",
            "file": "signal.js",
            "line": 407,
            "description": "A numerical algorithm class for finding the index of numbers bracketting a target number. The array must be either\nmonotonically increasing or decreasing array of numbers.",
            "is_constructor": 1
        }
    },
    "classitems": [
        {
            "file": "graphics/constants.js",
            "line": 1,
            "description": "File     : config.js\nProject  : N Simulator Library\nPurpose  : Source file for signal trace user interface objects.\nRevisions: Original definition by Lawrence Gunn.\n           2014/02/01\nCopyright (c) 2014 by Lawrence Gunn\nAll Rights Reserved.",
            "class": "UI.Scene.Network"
        },
        {
            "file": "graphics/pi-canvas.js",
            "line": 1,
            "description": "File     : pi-canvas.js\nProject  : N Simulator Library\nPurpose  : Source file for pi canvas controller and renderer objects.\nRevisions: Original definition by Lawrence Gunn.\n           2014/02/24\nCopyright (c) 2014 by Lawrence Gunn\nAll Rights Reserved.",
            "class": "UI.Scene.Network"
        },
        {
            "file": "graphics/pi-network.js",
            "line": 1,
            "description": "File     : pi-network.js\nProject  : N Simulator Library\nPurpose  : Source file for manufacturing, rendering, and controlling Pi representations of neurons.\nRevisions: Original definition by Lawrence Gunn.\n           2014/02/23\nCopyright (c) 2014 by Lawrence Gunn\nAll Rights Reserved.",
            "class": "UI.Scene.Network"
        },
        {
            "file": "graphics/pi-neuron.js",
            "line": 1,
            "description": "File     : pi-neuron.js\nProject  : N Simulator Library\nPurpose  : Source file for manufacturing, rendering, and controlling Pi representations of neurons.\nRevisions: Original definition by Lawrence Gunn.\n           2014/02/23\nCopyright (c) 2014 by Lawrence Gunn\nAll Rights Reserved.",
            "class": "UI.Scene.Network"
        },
        {
            "file": "graphics/pi-standard-templates.js",
            "line": 1,
            "description": "File     : pi-standard-templates.js\nProject  : N Simulator Library\nPurpose  : Source file for templates for standard/common Pi neuron graphics.\nRevisions: Original definition by Lawrence Gunn.\n           2014/02/23\nCopyright (c) 2014 by Lawrence Gunn\nAll Rights Reserved.",
            "class": "UI.Scene.Network"
        },
        {
            "file": "graphics/scene.js",
            "line": 1,
            "description": "File     : scenes.js\nProject  : N Simulator Library\nPurpose  : Source file for scenes.\nRevisions: Original definition by Lawrence Gunn.\n           2014/02/24\nCopyright (c) 2014 by Lawrence Gunn\nAll Rights Reserved.",
            "class": "UI.Scene.Network"
        },
        {
            "file": "graphics/scene.js",
            "line": 18,
            "description": "This is the Scene namespace for N user interface.",
            "class": "UI.Scene.Network",
            "namespace": "UI.Scene"
        },
        {
            "file": "graphics/scene.js",
            "line": 44,
            "itemtype": "method",
            "name": "SetNetwork",
            "params": [
                {
                    "name": "network",
                    "description": "The N.Network object to be displayed in the scene.",
                    "type": "Object"
                },
                {
                    "name": "scalePixelsPerUnit",
                    "description": "{"
                },
                {
                    "name": "position",
                    "description": ""
                }
            ],
            "class": "UI.Scene.Network",
            "namespace": "UI.Scene"
        },
        {
            "file": "graphics/signal-trace.js",
            "line": 1,
            "description": "File     : signal-trace.js\nProject  : N Simulator Library\nPurpose  : Source file for signal trace user interface objects.\nRevisions: Original definition by Lawrence Gunn.\n           2014/01/27\nCopyright (c) 2014 by Lawrence Gunn\nAll Rights Reserved.",
            "class": "PiNetworkPanelController",
            "namespace": "UI.Scene"
        },
        {
            "file": "test/network-test.js",
            "line": 1,
            "description": "File     : pi-network-test.js\nProject  : N Simulator Library\nPurpose  : Source file for network graphics testing.\nRevisions: Original definition by Lawrence Gunn.\n           2014/03/02\nCopyright (c) 2014 by Lawrence Gunn\nAll Rights Reserved.",
            "class": "PiNetworkPanelController",
            "namespace": "UI.Scene"
        },
        {
            "file": "test/pi-neuron-test.js",
            "line": 1,
            "description": "File     : pi-neuron-test.js\nProject  : N Simulator Library\nPurpose  : Source file for signal testing.\nRevisions: Original definition by Lawrence Gunn.\n           2014/02/19\nCopyright (c) 2014 by Lawrence Gunn\nAll Rights Reserved.",
            "class": "PiNetworkPanelController",
            "namespace": "UI.Scene"
        },
        {
            "file": "test/signal-trace-test.js",
            "line": 1,
            "description": "File     : signal-trace-test.js\nProject  : N Simulator Library\nPurpose  : Source file for signal testing.\nRevisions: Original definition by Lawrence Gunn.\n           2014/01/25\nCopyright (c) 2014 by Lawrence Gunn\nAll Rights Reserved.",
            "class": "PiNetworkPanelController",
            "namespace": "UI.Scene"
        },
        {
            "file": "ui/pi-network-panel.js",
            "line": 1,
            "description": "File     : pi-network-panel.js\nProject  : N Simulator Library\nPurpose  : Source file for pi network panel controller and renderer objects.\nRevisions: Original definition by Lawrence Gunn.\n           2014/03/08\nCopyright (c) 2014 by Lawrence Gunn\nAll Rights Reserved.",
            "class": "PiNetworkPanelController",
            "namespace": "UI.Scene"
        },
        {
            "file": "ui/pi-network-panel.js",
            "line": 37,
            "description": "Sets HoverPath scope variable on mouse entering a compartment.",
            "itemtype": "method",
            "name": "onCompartmentMouseEnter",
            "params": [
                {
                    "name": "event",
                    "description": ""
                },
                {
                    "name": "compartment",
                    "description": ""
                }
            ],
            "class": "PiNetworkPanelController",
            "module": "N"
        },
        {
            "file": "ui/pi-neuron-info-panel.js",
            "line": 1,
            "description": "File     : pi-neuron-info-scene.js\nProject  : N Simulator Library\nPurpose  : Source file for pi neuron information panel controller.\nRevisions: Original definition by Lawrence Gunn.\n           2014/03/09\nCopyright (c) 2014 by Lawrence Gunn\nAll Rights Reserved.",
            "class": "PiNeuronInfoPanelController",
            "module": "N"
        },
        {
            "file": "ui/pi-neuron-panel.js",
            "line": 1,
            "description": "File     : pi-neuron-panel.js\nProject  : N Simulator Library\nPurpose  : Source file for pi neuron panel controller and renderer objects.\nRevisions: Original definition by Lawrence Gunn.\n           2014/03/08\nCopyright (c) 2014 by Lawrence Gunn\nAll Rights Reserved.",
            "class": "Comp.OutputFromSignal",
            "module": "N"
        },
        {
            "file": "ui/pi-neuron-panel.js",
            "line": 22,
            "type": "{module|module|*|module|module|module}",
            "class": "Comp.OutputFromSignal",
            "module": "N"
        },
        {
            "file": "ui/pi-signal-trace-scene.js",
            "line": 1,
            "description": "File     : pi-signal-trace-scene.js\nProject  : N Simulator Library\nPurpose  : Source file for pi signal-trace scene controller and renderer objects.\nRevisions: Original definition by Lawrence Gunn.\n           2014/03/08\nCopyright (c) 2014 by Lawrence Gunn\nAll Rights Reserved.",
            "class": "Comp.OutputFromSignal",
            "module": "N"
        },
        {
            "file": "compartments.js",
            "line": 1,
            "description": "File     : compartments.js\nProject  : N Simulator Library\nPurpose  : Source file for standard compartment objects.\nRevisions: Original definition by Lawrence Gunn.\n           2014/02/19\nCopyright (c) 2014 by Lawrence Gunn\nAll Rights Reserved.",
            "class": "Comp.OutputFromSignal",
            "module": "N"
        },
        {
            "file": "compartments.js",
            "line": 209,
            "description": "Sets the signal.",
            "itemtype": "method",
            "name": "SetSignal",
            "params": [
                {
                    "name": "signal",
                    "description": "",
                    "type": "N.Signal"
                }
            ],
            "is_constructor": 1,
            "class": "Comp.SignalInput",
            "module": "N"
        },
        {
            "file": "connection.js",
            "line": 1,
            "description": "File     : connection.js\nProject  : N Simulator Library\nPurpose  : Source file for connection object.\nRevisions: Original definition by Lawrence Gunn.\n           2014/03/13\nCopyright (c) 2014 by Lawrence Gunn\nAll Rights Reserved.",
            "class": "Connection",
            "module": "N"
        },
        {
            "file": "connection.js",
            "line": 37,
            "description": "Returns the object type.",
            "itemtype": "method",
            "name": "GetType",
            "return": {
                "description": "",
                "type": "N.Type.Connection"
            },
            "class": "Connection",
            "module": "N"
        },
        {
            "file": "connection.js",
            "line": 46,
            "description": "Attach to the source and sink compartments.",
            "itemtype": "method",
            "name": "Connect",
            "class": "Connection",
            "module": "N"
        },
        {
            "file": "connection.js",
            "line": 57,
            "description": "Load a connection from a JSON object. Note that if the JSON object has a 'Template' member then this is loaded from first.",
            "itemtype": "method",
            "name": "LoadFrom",
            "params": [
                {
                    "name": "json",
                    "description": "",
                    "type": "JSON"
                }
            ],
            "return": {
                "description": "",
                "type": "Connection"
            },
            "class": "Connection",
            "module": "N"
        },
        {
            "file": "n.js",
            "line": 1,
            "description": "File     : n.js\nProject  : N Simulator Library\nPurpose  : Source file for signal relate objects.\nRevisions: Original definition by Lawrence Gunn.\n           2014/01/25\nCopyright (c) 2014 by Lawrence Gunn\nAll Rights Reserved.",
            "class": "N",
            "module": "N"
        },
        {
            "file": "n.js",
            "line": 38,
            "description": "Create an instance of a object from the json, where json.ClassName is the name of the object and all properties\nof the json object will be copied into the new object.",
            "itemtype": "method",
            "name": "N.CreateInstance",
            "params": [
                {
                    "name": "json",
                    "description": "",
                    "type": "JSON"
                }
            ],
            "return": {
                "description": "",
                "type": "DeferredObject"
            },
            "class": "N",
            "module": "N"
        },
        {
            "file": "n.js",
            "line": 54,
            "description": "Create a new 'N' object. The object must be in the 'N' namespace.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "N.NewN",
            "params": [
                {
                    "name": "className",
                    "description": "(Mandatory)  - A classname in the form 'N.First.Second.Class', hence N.Neuron, N.UI.PiNeuron...",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "(Optional) - Arguments to be passed to contructor. Can be zero, one, or more.",
                    "type": "...*"
                }
            ],
            "return": {
                "description": "A deferred object used for attaching done and fail callbacks",
                "type": "DeferredObject"
            },
            "class": "N",
            "module": "N"
        },
        {
            "file": "n.js",
            "line": 102,
            "description": "Returns an existing object from a path.",
            "itemtype": "method",
            "name": "N.GetN",
            "params": [
                {
                    "name": "className",
                    "description": "(Mandatory)  - A path string in the form 'N.First.Second.SomeJson'.",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "(Optional) - Arguments to be passed to contructor. Can be zero, one, or more.",
                    "type": "...*"
                }
            ],
            "return": {
                "description": "A deferred object used for attaching done and fail callbacks",
                "type": "DeferredObject"
            },
            "class": "N",
            "module": "N"
        },
        {
            "file": "n.js",
            "line": 125,
            "description": "Returns the object pointed to by the path relative to",
            "itemtype": "method",
            "name": "N.FromPath",
            "params": [
                {
                    "name": "network",
                    "description": "",
                    "type": "N.Network"
                },
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns a network, neuron, or compartment. On error returns an object with an error element which contains a message, the path, and the path part that caused the problem.",
                "type": "N.Network|N.Neuron|N.Compartment"
            },
            "class": "N",
            "module": "N"
        },
        {
            "file": "n.js",
            "line": 238,
            "description": "Write to the system console (or some log, if overridden).",
            "itemtype": "method",
            "name": "N.L",
            "params": [
                {
                    "name": "logText",
                    "description": ""
                }
            ],
            "class": "N",
            "module": "N"
        },
        {
            "file": "n.js",
            "line": 247,
            "description": "The standard timestep for simulations - 1 millisecond",
            "type": "{number} Timestep",
            "class": "N",
            "module": "N"
        },
        {
            "file": "n.js",
            "line": 253,
            "description": "Converts an angle in degrees to radians.",
            "itemtype": "method",
            "name": "N.Rad",
            "params": [
                {
                    "name": "angle",
                    "description": "Angle in degrees",
                    "type": "Real"
                }
            ],
            "return": {
                "description": "Angle in radians",
                "type": "Real"
            },
            "class": "N",
            "module": "N"
        },
        {
            "file": "n.js",
            "line": 265,
            "description": "Create a globally unique ID and return it as a string.",
            "itemtype": "method",
            "name": "N.GenerateUUID",
            "return": {
                "description": "Unique Identifier string",
                "type": "String"
            },
            "class": "N",
            "module": "N"
        },
        {
            "file": "n.js",
            "line": 288,
            "description": "Add an object to the Objects dictionary",
            "itemtype": "method",
            "name": "Add",
            "type": "Object",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "class": "Objects",
            "module": "N"
        },
        {
            "file": "n.js",
            "line": 298,
            "description": "Get an object to the Objects dictionary",
            "itemtype": "method",
            "name": "Get",
            "type": "Object",
            "params": [
                {
                    "name": "uid",
                    "description": "A unique identifier string for an object",
                    "type": "String"
                }
            ],
            "return": {
                "description": "An object or null.",
                "type": "Object"
            },
            "class": "Objects",
            "module": "N"
        },
        {
            "file": "n.js",
            "line": 309,
            "description": "Remove the reference to the object to the Objects dictionary",
            "itemtype": "method",
            "name": "Remove",
            "type": "Object",
            "params": [
                {
                    "name": "uid",
                    "description": "A unique identifier string for an object",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns true if the object exists, false otherwise.",
                "type": "Object"
            },
            "class": "Objects",
            "module": "N"
        },
        {
            "file": "network.js",
            "line": 1,
            "description": "File     : network.js\nProject  : N Simulator Library\nPurpose  : Source file for neuron relate objects.\nRevisions: Original definition by Lawrence Gunn.\n           2014/02/19\n\nCopyright (c) 2014 by Lawrence Gunn\nAll Rights Reserved.",
            "class": "Network",
            "module": "N"
        },
        {
            "file": "network.js",
            "line": 42,
            "description": "Returns the object type.",
            "itemtype": "method",
            "name": "GetType",
            "return": {
                "description": "",
                "type": "N.Type.Network"
            },
            "class": "Network",
            "module": "N"
        },
        {
            "file": "network.js",
            "line": 51,
            "description": "Get the parent network. This call is implemented by all network, neuron, and compartment objects.",
            "itemtype": "method",
            "name": "GetParent",
            "return": {
                "description": "The parent network object or null if there is none.",
                "type": "Object"
            },
            "class": "Network",
            "module": "N"
        },
        {
            "file": "network.js",
            "line": 60,
            "description": "Adds a child network to the network.",
            "itemtype": "method",
            "name": "AddNetwork",
            "params": [
                {
                    "name": "network",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "N.Network"
            },
            "class": "Network",
            "module": "N"
        },
        {
            "file": "network.js",
            "line": 77,
            "description": "Get number of networks directly owned by this network.",
            "itemtype": "method",
            "name": "GetNumNetworks",
            "return": {
                "description": "",
                "type": "Integer"
            },
            "class": "Network",
            "module": "N"
        },
        {
            "file": "network.js",
            "line": 86,
            "description": "Get a network owned by this network by index.",
            "itemtype": "method",
            "name": "GetNetworkByIndex",
            "params": [
                {
                    "name": "index",
                    "description": "",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "",
                "type": "N.Network"
            },
            "class": "Network",
            "module": "N"
        },
        {
            "file": "network.js",
            "line": 96,
            "description": "Get a network owned by this network given the network short string.",
            "itemtype": "method",
            "name": "GetNetworkByName",
            "params": [
                {
                    "name": "shortName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "N.Network"
            },
            "class": "Network",
            "module": "N"
        },
        {
            "file": "network.js",
            "line": 106,
            "description": "Adds a neuron to the network.",
            "itemtype": "method",
            "name": "AddNeuron",
            "params": [
                {
                    "name": "neuron",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "N.Neuron"
            },
            "class": "Network",
            "module": "N"
        },
        {
            "file": "network.js",
            "line": 123,
            "description": "Get number of neurons directly owned by this network.",
            "itemtype": "method",
            "name": "GetNumNeurons",
            "return": {
                "description": "",
                "type": "Integer"
            },
            "class": "Network",
            "module": "N"
        },
        {
            "file": "network.js",
            "line": 132,
            "description": "Get a neuron owned by this network by index.",
            "itemtype": "method",
            "name": "GetNeuronByIndex",
            "params": [
                {
                    "name": "index",
                    "description": "",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "",
                "type": "N.Neuron"
            },
            "class": "Network",
            "module": "N"
        },
        {
            "file": "network.js",
            "line": 142,
            "description": "Get a neuron owned by this network given the neuron short string.",
            "itemtype": "method",
            "name": "GetNeuronByName",
            "params": [
                {
                    "name": "shortName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "N.Neuron"
            },
            "class": "Network",
            "module": "N"
        },
        {
            "file": "network.js",
            "line": 152,
            "description": "Add a connection and connect it immmediately.",
            "itemtype": "method",
            "name": "AddConnection",
            "params": [
                {
                    "name": "connection",
                    "description": "",
                    "type": "N.Connection"
                }
            ],
            "class": "Network",
            "module": "N"
        },
        {
            "file": "network.js",
            "line": 164,
            "description": "Get the number of connections owned by this network.",
            "itemtype": "method",
            "name": "GetNumConnections",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Network",
            "module": "N"
        },
        {
            "file": "network.js",
            "line": 173,
            "description": "Get a connection by index",
            "itemtype": "method",
            "name": "GetConnectionsByIndex",
            "params": [
                {
                    "name": "index",
                    "description": "",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "",
                "type": "N.Connection"
            },
            "class": "Network",
            "module": "N"
        },
        {
            "file": "network.js",
            "line": 183,
            "description": "Get a connection given the connection path string.",
            "itemtype": "method",
            "name": "GetConnectionsByPath",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "N.Connection"
            },
            "class": "Network",
            "module": "N"
        },
        {
            "file": "network.js",
            "line": 193,
            "description": "Returns the full path from the top level network to this network.",
            "itemtype": "method",
            "name": "GetFullPath",
            "return": {
                "description": "The concatinated short names of this network and its parents, separated by '/'.",
                "type": "String"
            },
            "class": "Network",
            "module": "N"
        },
        {
            "file": "network.js",
            "line": 202,
            "description": "Update the output of all child networks, neurons, and connections.",
            "itemtype": "method",
            "name": "Upate",
            "params": [
                {
                    "name": "time",
                    "description": "The time of the current simulation step.",
                    "type": "Real"
                }
            ],
            "return": {
                "description": "Returns a reference to self.",
                "type": "Network"
            },
            "class": "Network",
            "module": "N"
        },
        {
            "file": "network.js",
            "line": 216,
            "description": "Loads the properties of the JSON configuration to self. In doing so it creates any child neurons.",
            "itemtype": "method",
            "name": "LoadFrom",
            "params": [
                {
                    "name": "json",
                    "description": "The JSON object containing the configuration.",
                    "type": "JSON"
                }
            ],
            "return": {
                "description": "Returns a reference to self",
                "type": "Network"
            },
            "class": "Network",
            "module": "N"
        },
        {
            "file": "neuron.js",
            "line": 1,
            "description": "File     : neuron.js\nProject  : N Simulator Library\nPurpose  : Source file for neuron relate objects.\nRevisions: Original definition by Lawrence Gunn.\n           2014/02/19\nCopyright (c) 2014 by Lawrence Gunn\nAll Rights Reserved.",
            "class": "Neuron",
            "module": "N"
        },
        {
            "file": "neuron.js",
            "line": 41,
            "description": "Returns the object type.",
            "itemtype": "method",
            "name": "GetType",
            "return": {
                "description": "",
                "type": "N.Type.Neuron"
            },
            "class": "Neuron",
            "module": "N"
        },
        {
            "file": "neuron.js",
            "line": 50,
            "description": "Add a compartment to the neuron.",
            "itemtype": "method",
            "name": "AddCompartment",
            "params": [
                {
                    "name": "compartment",
                    "description": "",
                    "type": "N.Comp.*"
                }
            ],
            "return": {
                "description": "The compartment passed into the method is returned.",
                "type": "N.Comp.*"
            },
            "class": "Neuron",
            "module": "N"
        },
        {
            "file": "neuron.js",
            "line": 82,
            "description": "Load a neuron from a JSON object. Note that if the JSON object has a 'Template' member then this is loaded from first.",
            "itemtype": "method",
            "name": "LoadFrom",
            "params": [
                {
                    "name": "json",
                    "description": "",
                    "type": "JSON"
                }
            ],
            "return": {
                "description": "",
                "type": "Neuron"
            },
            "class": "Neuron",
            "module": "N"
        },
        {
            "file": "signal.js",
            "line": 1,
            "description": "File     : signal.js\nProject  : N Simulator Library\nPurpose  : Source file for signal relate objects.\nRevisions: Original definition by Lawrence Gunn.\n           2014/01/09\nCopyright (c) 2014 by Lawrence Gunn\nAll Rights Reserved.",
            "class": "AnalogSignal",
            "module": "N"
        },
        {
            "file": "signal.js",
            "line": 239,
            "description": "Get the value of the signal at a given time.",
            "itemtype": "method",
            "name": "GetValue",
            "params": [
                {
                    "name": "time",
                    "description": "",
                    "type": "Real"
                }
            ],
            "return": {
                "description": "",
                "type": "Real"
            },
            "class": "DiscreteSignal",
            "module": "N"
        },
        {
            "file": "signal.js",
            "line": 371,
            "description": "Loads the properties of the JSON configuration to self. In doing so it creates any child neurons.",
            "itemtype": "method",
            "name": "LoadFrom",
            "params": [
                {
                    "name": "json",
                    "description": "The JSON object containing the configuration.",
                    "type": "JSON"
                }
            ],
            "return": {
                "description": "Returns a reference to self",
                "type": "Network"
            },
            "class": "DiscreteSignal",
            "module": "N"
        },
        {
            "file": "signal.js",
            "line": 422,
            "description": "Returns the last low index found.",
            "return": {
                "description": "",
                "type": "Real"
            },
            "is_constructor": 1,
            "class": "TableSearch",
            "module": "N"
        },
        {
            "file": "signal.js",
            "line": 431,
            "description": "Find the index in the array 'x' that is where the index is below xTarget and index+1 is above xTarget. If the target\nis before the beginning of the array then it returns -1. If it is beyond the end of the array it returns x.length-1.",
            "itemtype": "method",
            "name": "Find",
            "params": [
                {
                    "name": "xTarget",
                    "description": "",
                    "type": "Real"
                },
                {
                    "name": "x",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Integer"
            },
            "is_constructor": 1,
            "class": "TableSearch",
            "module": "N"
        },
        {
            "file": "stock-neurons.js",
            "line": 1,
            "description": "File     : stock-neurons.js\nProject  : N Simulator Library\nPurpose  : Source file for stock neuron object configurations.\nRevisions: Original definition by Lawrence Gunn.\n           2014/02/19\nCopyright (c) 2014 by Lawrence Gunn\nAll Rights Reserved.",
            "class": "",
            "module": "N"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " connection.js:37"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " connection.js:57"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " n.js:38"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " network.js:42"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " network.js:51"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " network.js:60"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " network.js:77"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " network.js:86"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " network.js:96"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " network.js:106"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " network.js:123"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " network.js:132"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " network.js:142"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " network.js:164"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " network.js:173"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " network.js:183"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " network.js:193"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " network.js:216"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " neuron.js:41"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " neuron.js:82"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " signal.js:239"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " signal.js:371"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " signal.js:422"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " signal.js:431"
        },
        {
            "message": "Missing item type\nFile     : config.js\nProject  : N Simulator Library\nPurpose  : Source file for signal trace user interface objects.\nRevisions: Original definition by Lawrence Gunn.\n           2014/02/01\nCopyright (c) 2014 by Lawrence Gunn\nAll Rights Reserved.",
            "line": " graphics/constants.js:1"
        },
        {
            "message": "Missing item type\nFile     : pi-canvas.js\nProject  : N Simulator Library\nPurpose  : Source file for pi canvas controller and renderer objects.\nRevisions: Original definition by Lawrence Gunn.\n           2014/02/24\nCopyright (c) 2014 by Lawrence Gunn\nAll Rights Reserved.",
            "line": " graphics/pi-canvas.js:1"
        },
        {
            "message": "Missing item type\nFile     : pi-network.js\nProject  : N Simulator Library\nPurpose  : Source file for manufacturing, rendering, and controlling Pi representations of neurons.\nRevisions: Original definition by Lawrence Gunn.\n           2014/02/23\nCopyright (c) 2014 by Lawrence Gunn\nAll Rights Reserved.",
            "line": " graphics/pi-network.js:1"
        },
        {
            "message": "Missing item type\nFile     : pi-neuron.js\nProject  : N Simulator Library\nPurpose  : Source file for manufacturing, rendering, and controlling Pi representations of neurons.\nRevisions: Original definition by Lawrence Gunn.\n           2014/02/23\nCopyright (c) 2014 by Lawrence Gunn\nAll Rights Reserved.",
            "line": " graphics/pi-neuron.js:1"
        },
        {
            "message": "Missing item type\nFile     : pi-standard-templates.js\nProject  : N Simulator Library\nPurpose  : Source file for templates for standard/common Pi neuron graphics.\nRevisions: Original definition by Lawrence Gunn.\n           2014/02/23\nCopyright (c) 2014 by Lawrence Gunn\nAll Rights Reserved.",
            "line": " graphics/pi-standard-templates.js:1"
        },
        {
            "message": "Missing item type\nFile     : scenes.js\nProject  : N Simulator Library\nPurpose  : Source file for scenes.\nRevisions: Original definition by Lawrence Gunn.\n           2014/02/24\nCopyright (c) 2014 by Lawrence Gunn\nAll Rights Reserved.",
            "line": " graphics/scene.js:1"
        },
        {
            "message": "Missing item type\nThis is the Scene namespace for N user interface.",
            "line": " graphics/scene.js:18"
        },
        {
            "message": "Missing item type\nFile     : signal-trace.js\nProject  : N Simulator Library\nPurpose  : Source file for signal trace user interface objects.\nRevisions: Original definition by Lawrence Gunn.\n           2014/01/27\nCopyright (c) 2014 by Lawrence Gunn\nAll Rights Reserved.",
            "line": " graphics/signal-trace.js:1"
        },
        {
            "message": "Missing item type\nFile     : pi-network-test.js\nProject  : N Simulator Library\nPurpose  : Source file for network graphics testing.\nRevisions: Original definition by Lawrence Gunn.\n           2014/03/02\nCopyright (c) 2014 by Lawrence Gunn\nAll Rights Reserved.",
            "line": " test/network-test.js:1"
        },
        {
            "message": "Missing item type\nFile     : pi-neuron-test.js\nProject  : N Simulator Library\nPurpose  : Source file for signal testing.\nRevisions: Original definition by Lawrence Gunn.\n           2014/02/19\nCopyright (c) 2014 by Lawrence Gunn\nAll Rights Reserved.",
            "line": " test/pi-neuron-test.js:1"
        },
        {
            "message": "Missing item type\nFile     : signal-trace-test.js\nProject  : N Simulator Library\nPurpose  : Source file for signal testing.\nRevisions: Original definition by Lawrence Gunn.\n           2014/01/25\nCopyright (c) 2014 by Lawrence Gunn\nAll Rights Reserved.",
            "line": " test/signal-trace-test.js:1"
        },
        {
            "message": "Missing item type\nFile     : pi-network-panel.js\nProject  : N Simulator Library\nPurpose  : Source file for pi network panel controller and renderer objects.\nRevisions: Original definition by Lawrence Gunn.\n           2014/03/08\nCopyright (c) 2014 by Lawrence Gunn\nAll Rights Reserved.",
            "line": " ui/pi-network-panel.js:1"
        },
        {
            "message": "Missing item type\nFile     : pi-neuron-info-scene.js\nProject  : N Simulator Library\nPurpose  : Source file for pi neuron information panel controller.\nRevisions: Original definition by Lawrence Gunn.\n           2014/03/09\nCopyright (c) 2014 by Lawrence Gunn\nAll Rights Reserved.",
            "line": " ui/pi-neuron-info-panel.js:1"
        },
        {
            "message": "Missing item type\nFile     : pi-neuron-panel.js\nProject  : N Simulator Library\nPurpose  : Source file for pi neuron panel controller and renderer objects.\nRevisions: Original definition by Lawrence Gunn.\n           2014/03/08\nCopyright (c) 2014 by Lawrence Gunn\nAll Rights Reserved.",
            "line": " ui/pi-neuron-panel.js:1"
        },
        {
            "message": "Missing item type",
            "line": " ui/pi-neuron-panel.js:22"
        },
        {
            "message": "Missing item type\nFile     : pi-signal-trace-scene.js\nProject  : N Simulator Library\nPurpose  : Source file for pi signal-trace scene controller and renderer objects.\nRevisions: Original definition by Lawrence Gunn.\n           2014/03/08\nCopyright (c) 2014 by Lawrence Gunn\nAll Rights Reserved.",
            "line": " ui/pi-signal-trace-scene.js:1"
        },
        {
            "message": "Missing item type\nFile     : compartments.js\nProject  : N Simulator Library\nPurpose  : Source file for standard compartment objects.\nRevisions: Original definition by Lawrence Gunn.\n           2014/02/19\nCopyright (c) 2014 by Lawrence Gunn\nAll Rights Reserved.",
            "line": " compartments.js:1"
        },
        {
            "message": "Missing item type\nFile     : connection.js\nProject  : N Simulator Library\nPurpose  : Source file for connection object.\nRevisions: Original definition by Lawrence Gunn.\n           2014/03/13\nCopyright (c) 2014 by Lawrence Gunn\nAll Rights Reserved.",
            "line": " connection.js:1"
        },
        {
            "message": "Missing item type\nFile     : n.js\nProject  : N Simulator Library\nPurpose  : Source file for signal relate objects.\nRevisions: Original definition by Lawrence Gunn.\n           2014/01/25\nCopyright (c) 2014 by Lawrence Gunn\nAll Rights Reserved.",
            "line": " n.js:1"
        },
        {
            "message": "Missing item type\nThe standard timestep for simulations - 1 millisecond",
            "line": " n.js:247"
        },
        {
            "message": "Missing item type\nFile     : network.js\nProject  : N Simulator Library\nPurpose  : Source file for neuron relate objects.\nRevisions: Original definition by Lawrence Gunn.\n           2014/02/19\n\nCopyright (c) 2014 by Lawrence Gunn\nAll Rights Reserved.",
            "line": " network.js:1"
        },
        {
            "message": "Missing item type\nFile     : neuron.js\nProject  : N Simulator Library\nPurpose  : Source file for neuron relate objects.\nRevisions: Original definition by Lawrence Gunn.\n           2014/02/19\nCopyright (c) 2014 by Lawrence Gunn\nAll Rights Reserved.",
            "line": " neuron.js:1"
        },
        {
            "message": "Missing item type\nFile     : signal.js\nProject  : N Simulator Library\nPurpose  : Source file for signal relate objects.\nRevisions: Original definition by Lawrence Gunn.\n           2014/01/09\nCopyright (c) 2014 by Lawrence Gunn\nAll Rights Reserved.",
            "line": " signal.js:1"
        },
        {
            "message": "Missing item type\nReturns the last low index found.",
            "line": " signal.js:422"
        },
        {
            "message": "Missing item type\nFile     : stock-neurons.js\nProject  : N Simulator Library\nPurpose  : Source file for stock neuron object configurations.\nRevisions: Original definition by Lawrence Gunn.\n           2014/02/19\nCopyright (c) 2014 by Lawrence Gunn\nAll Rights Reserved.",
            "line": " stock-neurons.js:1"
        }
    ]
}